{"version":3,"sources":["Components/Navbar.js","Controllers/Query.js","Controllers/AndhraDataController.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","backdrop","this","click","style","height","drawerClickHandler","show","marginTop","Component","Toolbar","props","className","href","to","SideDrawer","DrawerToggleButton","onClick","Backdrop","andhraQuery","getAndhraDataWithoutHistorical","callback","a","request","catch","err","response","data","Home","componentDidMount","error","console","log","loading","districts","map","district","key","data-label","cases","active","recovered","deaths","schema","name","alternateName","url","App","Helmet","type","JSON","stringify","path","About","HomeRoute","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.2c131723.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n// import { IconName } from 'react-icons/fa';\n\nexport default class NavBar extends Component {\n  state = {\n    sideDrawerOpen: false,\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n\n  render() {\n    let backdrop;\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n    return (\n      <div style={{ height: '100%' }}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backdrop}\n        <main style={{ marginTop: '64px' }}></main>\n      </div>\n    );\n  }\n}\n\nconst Toolbar = (props) => (\n  <header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n      <div className=\"toolbar__toggle-button\">\n        <DrawerToggleButton click={props.drawerClickHandler} />\n      </div>\n      <div className=\"toolbar__logo\">\n        <a href=\"/\">COVID-19</a>\n        <div className=\"title_caption\">Andhra Pradesh</div>\n      </div>\n      <div className=\"spacer\" />\n      <div className=\"toolbar_navigation-items\">\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          {/* <li>\n            <Link to=\"/users\">Users</Link>\n          </li> */}\n        </ul>\n      </div>\n    </nav>\n  </header>\n);\n\nconst SideDrawer = (props) => {\n  return (\n    <nav className={props.show ? 'side-drawer open' : 'side-drawer'}>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        {/* <li>\n          <Link to=\"/users\">Users</Link>\n        </li> */}\n      </ul>\n    </nav>\n  );\n};\n\nconst DrawerToggleButton = (props) => (\n  <button className=\"toggle-button\" onClick={props.click}>\n    <div className=\"toggle-button__line\" />\n    <div className=\"toggle-button__line\" />\n    <div className=\"toggle-button__line\" />\n  </button>\n);\n\nconst Backdrop = (props) => <div className=\"backdrop\" onClick={props.click} />;\n","export const graphQLendPoint = 'https://covidstat.info/graphql';\n\nexport const andhraQuerywithHistorical = `query {\n    state(countryName: \"India\", stateName: \"Andhra Pradesh\") {\n      state\n      cases\n      deaths\n      historical {\n        date\n        cases\n        deaths\n        recovered\n      }\n      districts {\n        district\n        cases\n        active\n        deaths\n        recovered\n        todayCases\n        todayDeaths\n        todayRecovered\n        historical {\n          date\n          cases\n          deaths\n          recovered\n        }\n      }\n    }\n  }`;\n\nexport const andhraQuery = `query {\n    state(countryName: \"India\", stateName: \"Andhra Pradesh\") {\n      state\n      cases\n      deaths\n      districts {\n        district\n        cases\n        active\n        deaths\n        recovered\n        todayCases\n        todayDeaths\n        todayRecovered\n      }\n    }\n  }`;\n","import axios from 'axios';\nimport { request } from 'graphql-request';\nimport { graphQLendPoint, andhraQuery } from './Query';\n\n//sending data as error,response in callback\n\nexport const getAndhraDataWithHistorical = async (callback) => {\n  const response = await request(\n    graphQLendPoint,\n    andhraQuery,\n    {}\n  ).catch((err) => callback(err.response.data, null));\n  callback(null, response);\n};\n\nexport const getAndhraDataWithoutHistorical = async (callback) => {\n  const response = await request(\n    graphQLendPoint,\n    andhraQuery,\n    {}\n  ).catch((err) => callback(err.response.data, null));\n  callback(null, response);\n};\n","import React, { Component } from 'react';\nimport { getAndhraDataWithoutHistorical } from '../Controllers/AndhraDataController';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: null,\n      response: null,\n    };\n  }\n\n  componentDidMount = () => {\n    getAndhraDataWithoutHistorical((error, response) => {\n      console.log('this is getAndhraDataWithHistorical', error, response);\n      this.setState({\n        error,\n        response,\n        loading: false,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.state.loading && this.state.response && (\n          <div>\n            <table className=\"responsive-table\">\n              <thead>\n                <tr>\n                  <th>District</th>\n                  <th>Total</th>\n                  <th>Active</th>\n                  <th>Recovered</th>\n                  <th>Deaths</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.response.state.districts.map((district) => {\n                  return (\n                    <tr key={district.district}>\n                      <td data-label={'District'}>{district.district}</td>\n                      <td data-label={'Total'}>{district.cases}</td>\n                      <td data-label={'Active'}>{district.active}</td>\n                      <td data-label={'Recovered'}>{district.recovered}</td>\n                      <td data-label={'Deaths'}>{district.deaths}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport NavBar from './Components/Navbar';\nimport Home from './Components/Home';\n\nconst schema = {\n  '@context': 'http://schema.org/',\n  name: 'Coronavirus Outbreak in Andhra',\n  alternateName: 'COVID-19 Andhra Tracker',\n  url: 'https://www.covidandhra.com/',\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n      </Helmet>\n      <Router>\n        <div>\n          <NavBar />\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            {/* <Route path=\"/users\">\n              <Users />\n            </Route> */}\n            <Route path=\"/\">\n              <HomeRoute />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nfunction HomeRoute() {\n  return <Home></Home>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}